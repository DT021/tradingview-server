{"version":3,"sources":["config.js","components/Table/Table.js","components/Home/Home.js","components/Chart/Chart.js","components/Create/Create.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js","assets/up-arrow.svg","assets/down-arrow.svg","logo.svg"],"names":["API_URL","Table","props","state","rows","deleteMarket","bind","getData","axios","get","then","data","setState","this","id","window","confirm","delete","className","style","margin","scope","to","class","map","row","i","name","link","onClick","React","Component","HOME","Chart","chartRef","createRef","signals","chartId","match","params","options","zoom","enabled","xaxis","labels","formatter","value","timestamp","dayjs","format","yaxis","opposite","plotOptions","series","Axios","chart_data","d","time","open","high","low","close","socket","io","connect","emit","on","type","prevState","newData","push","setInterval","console","log","width","ref","signal","src","upArrow","downArrow","Create","add","e","preventDefault","post","alert","catch","onSubmit","onChange","target","Nav","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","Fragment","exact","path","component","Home","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.f6dd1f62.chunk.js","sourcesContent":["export const API_URL = \"http://104.238.145.61:7000\"\nexport const SOCKET_URL = \"http://104.238.145.61:7001\"","import React, {useEffect, useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport {API_URL, SOCKET_URL} from '../../config';\nimport {Link} from 'react-router-dom';\n\n\nexport default class Table extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            rows: []\n        }\n        this.deleteMarket = this.deleteMarket.bind(this);\n        this.getData = this.getData.bind(this);\n    }\n\n    getData(){\n        axios.get(API_URL + \"/api/markets\").then((data) => {\n            this.setState({\n                rows: data.data\n            })\n        })\n    }\n\n    componentDidMount(){\n        this.getData();\n    }\n\n    deleteMarket(id){\n        let s = window.confirm(\"Do you want to delete this?\")\n        if(s){\n            axios.delete(`${API_URL}/api/market?id=${id}`).then((data) => {\n                this.getData();\n            });\n        }\n    }\n    \n\n    render(){\n        return(\n            <div className=\"create\" style={{\n                margin: \"60px 0\"\n            }}>\n                <table className=\"table border\">\n                    <thead>\n                        <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Link</th>\n                        <th scope=\"col\">Iframe</th>\n                        <th scope=\"col\"><Link to=\"/create\" class=\"btn btn-primary btn-sm\">Add</Link></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.rows.map((row, i) => {\n                                return (\n                                <tr>\n                                    <th scope=\"row\">{i + 1}</th>\n                                    <td>{row.name}</td>\n                                    <td>{row.link}</td>\n                                    <td>{<Link to={`/chart/${row.name}`}>Chart</Link>}</td>\n                                    <td><button onClick={() => {this.deleteMarket(row.id)}} class=\"btn btn-danger btn-sm\">Remove</button></td>\n                                </tr>\n                                )\n                            \n                            })\n                        }\n                        \n                        \n                    </tbody>\n                </table>\n            </div>\n            )\n    }\n    \n}\n","import React from 'react'\n\nexport default function HOME(){\n    return(\n        <div>\n            \n        </div>\n    )\n}","import React, { Component, createRef } from 'react'\nimport io from 'socket.io-client';\nimport AChart from \"react-apexcharts\";\nimport ApexCharts from 'apexcharts';\nimport Axios from 'axios';\nimport dayjs from 'dayjs';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Chart.css';\nimport upArrow from '../../assets/up-arrow.svg'\nimport downArrow from '../../assets/down-arrow.svg'\n\nexport default class Chart extends Component{\n    constructor(props){\n        super(props);\n        this.chartRef = createRef();\n        this.getData = this.getData.bind(this);\n        this.state = {\n            signals: [],\n            chartId: this.props.match.params.id,\n            options: {\n                zoom: {\n                    enabled: true\n                },\n                xaxis: {\n                    labels: {\n                        formatter: function (value, timestamp) {\n                            return dayjs(value * 1000).format('MMM DD HH:mm')\n                        }\n                    }\n                },\n                yaxis: {\n                    opposite: true\n                }\n            },\n            plotOptions: {\n\n            },\n            series: [{\n                data: []\n            }]\n          };\n        \n    }\n\n    getData(){\n        Axios.get(`http://localhost:7000/api/market?market=${this.state.chartId}`).then((data) => {\n            let chart_data = data.data.map((d) => {\n                return [d.time, d.open, d.high, d.low, d.close]\n            })\n            // console.log(chart_data)\n            this.setState({\n                series: [{\n                    data: chart_data\n                }]\n            })\n        })\n    }\n\n    componentDidMount(){\n        this.socket = io.connect(\"http://localhost:7001\");\n        this.socket.emit('start-socket', this.state.chartId);\n        this.socket.on('buy-signal', (data) => {\n            data.type = 'buy'\n            this.setState((prevState) => ({\n                signals: [data, ...prevState.signals]\n            }))\n        })\n\n        this.socket.on('sell-signal', (data) => {\n            data.type = 'sell'\n            this.setState((prevState) => ({\n                signals: [data, ...prevState.signals]\n            }))\n        })\n        this.newData = []\n        this.socket.on('chart-data', (d) => {\n            let row = [d.time, d.open, d.high, d.low, d.close]\n            this.newData.push(row)\n            // ApexCharts.exec('chart', 'appendData', [{\n            //     data: [row]\n            // }])\n            // this.setState((prevState) => ({\n            //     series: [{\n            //         data: [...prevState.series[0].data, row]\n            //     }]\n            // }))\n        })\n        this.socket.on('end-chart-data', () => {\n            this.setState({\n                series: [{\n                    data: this.newData\n                }]\n            })\n        })\n        setInterval(() => {\n            console.log(\"UPDATED\")\n            this.getData();\n        }, 10000);\n        \n    }\n\n    render(){\n        return(\n            <div className=\"info\">\n                <div className=\"chart\">\n                    <AChart\n                    id=\"chart\"\n                    options={this.state.options}\n                    series={this.state.series}\n                    type=\"candlestick\"\n                    width=\"100%\"\n                    ref={this.chartRef}\n                    />\n                </div>\n                <div className=\"notifications\">\n                    <table className=\"table\">\n                        <thead className=\"thead-light\">\n                            <tr>\n                                <th>Buy/Sell</th>\n                                <th>Open</th>\n                                <th>High</th>\n                                <th>Low</th>\n                                <th>Close</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.signals.map((signal) => {\n                                    return (\n                                    <tr>\n                                        <td>{signal.type == 'buy' ? <img src={upArrow} /> : <img src={downArrow} />}</td>\n                                        <td>{signal.open}</td>\n                                        <td>{signal.high}</td>\n                                        <td>{signal.low}</td>\n                                        <td>{signal.close}</td>\n                                    </tr>\n                                    )\n                                })\n                            }\n                            \n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport {API_URL, SOCKET_URL} from '../../config';\n\nexport default class Create extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            link: \"\"\n        }\n        this.add = this.add.bind(this);\n    }\n\n    add(e){\n        e.preventDefault();\n        let data = {\n            name: this.state.name,\n            link: this.state.link\n        }\n        axios.post(`${API_URL}/api/market`, data).then((data) => {\n            alert(\"Added successfully\")\n        }).catch((e) => {\n            alert(e)\n        })\n    }\n\n    render(){\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-4 offset-sm-4\">\n                    <form className=\"form\" style={{\"margin\": \"50px 0\"}} onSubmit={this.add}>\n                        <div className=\"form-group\">\n                            <label>Name</label>\n                            <input type=\"text\" className=\"form-control\" name='name' onChange={(e) => {\n                                this.setState({\n                                    name: e.target.value\n                                })\n                            }} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Link</label>\n                            <input type=\"text\" className=\"form-control\" name='link' onChange={(e) => {\n                                this.setState({\n                                    link: e.target.value\n                                })\n                            }} />    \n                        </div>\n                        <div className=\"form-group text-center\">\n                            <input type=\"submit\" className=\"btn btn-primary btn-block\" value=\"Add\" />\n                        </div>\n                        \n                    </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    \n}","import React from 'react'\nimport {Link} from 'react-router-dom'\nexport default function Nav(){\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container\">\n          <a class=\"navbar-brand\" href=\"#\">Tradingview</a>\n          <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n          </button>\n          <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n              <li class=\"nav-item active\">\n                <Link class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></Link>\n              </li>\n              <li class=\"nav-item\">\n                <Link to=\"/table\" class=\"nav-link\" href=\"#\">Table</Link>\n              </li>\n              <li class=\"nav-item\">\n                <Link to=\"/create\" class=\"nav-link\" href=\"#\">Create</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {HashRouter, Route, Link} from 'react-router-dom';\nimport Table from './components/Table/Table'\nimport Home from './components/Home/Home';\nimport Chart from './components/Chart/Chart';\nimport Create from './components/Create/Create';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Nav from './components/Nav/Nav';\n\nfunction App() {\n  return (\n      <React.Fragment>\n\n        <HashRouter>\n          <Nav />\n          <div className=\"container\">\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/table\" component={Table} />\n            <Route path=\"/create\" component={Create} />\n            <Route path=\"/chart/:id\" component={Chart} />\n          </div>\n          \n        </HashRouter>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/up-arrow.00b81309.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.4254d1c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}